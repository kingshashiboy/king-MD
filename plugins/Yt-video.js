const config = require('../config');
const { cmd } = require('../command');
const yts = require('yt-search');
const fetch = require('node-fetch');

cmd({
    pattern: "video",
    alias: ["mp4", "song"],
    react: "üé•",
    desc: "YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂ë‡∂ö‡∂ö‡∑ä download ‡∂ö‡∂ª‡∂±‡∑ä‡∂±",
    category: "download",
    use: ".video <‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube URL ‡∂ë‡∂ö>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª video ‡∂ë‡∂ö‡∑ö ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!");

        let videoUrl, title;

        // URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑Ä‡∑è‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è check ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        if (q.match(/(youtube\.com|youtu\.be)/)) {
            videoUrl = q;
            title = "YouTube Video";
        } else {
            const search = await yts(q);
            if (!search.videos.length) return await reply("‚ùå ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î result ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫!");
            videoUrl = search.videos[0].url;
            title = search.videos[0].title;
        }

        await reply("‚è≥ Video ‡∂ë‡∂ö download ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∂‡∂Ω‡∑è ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±.");

        // Download API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä video link ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
        const apiUrl = `https://apis.davidcyriltech.my.id/download/ytmp4?url=${encodeURIComponent(videoUrl)}`;

        // Retry function
        async function fetchWithRetry(url, retries = 3, delay = 3000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const res = await fetch(url);
                    if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
                    return res;
                } catch (e) {
                    if (i === retries - 1) throw e;
                    await new Promise(r => setTimeout(r, delay));
                }
            }
        }

        const response = await fetchWithRetry(apiUrl);
        const data = await response.json();

        if (!data.result || !data.result.download_url)
            return await reply("‚ùå Video download link ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫!");

        // API link ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä video ‡∂ë‡∂ö buffer ‡∂ë‡∂ö‡∂ö‡∂ß download ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        const videoResp = await fetchWithRetry(data.result.download_url);
        const buffer = await videoResp.arrayBuffer();

        // File size check (WhatsApp limit ~64MB)
        const sizeMB = buffer.byteLength / (1024 * 1024);
        if (sizeMB > 60) return await reply("‚ùå Video ‡∂ë‡∂ö ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂∫‡∑í (>60MB). ‡∂ö‡∑ô‡∂ß‡∑í clip ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");

        // Video send ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        await conn.sendMessage(from, {
            video: Buffer.from(buffer),
            mimetype: 'video/mp4',
            caption: `üé¨ *${title.substring(0, 60)}*`
        }, { quoted: mek });

        await reply(`‚úÖ Video ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑î‡∂±‡∑è: ${title}`);

    } catch (error) {
        console.error("Video Download Error:", error);
        await reply(`‚ùå Error: ${error.message}`);
    }
});
